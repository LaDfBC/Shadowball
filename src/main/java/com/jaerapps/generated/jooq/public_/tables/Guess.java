/*
 * This file is generated by jOOQ.
 */
package com.jaerapps.generated.jooq.public_.tables;


import com.jaerapps.generated.jooq.public_.Keys;
import com.jaerapps.generated.jooq.public_.Public;
import com.jaerapps.generated.jooq.public_.tables.records.GuessRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Guess extends TableImpl<GuessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.guess</code>
     */
    public static final Guess GUESS = new Guess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GuessRecord> getRecordType() {
        return GuessRecord.class;
    }

    /**
     * The column <code>public.guess.member_id</code>.
     */
    public final TableField<GuessRecord, String> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.guess.play_id</code>.
     */
    public final TableField<GuessRecord, UUID> PLAY_ID = createField(DSL.name("play_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.guess.guessed_number</code>.
     */
    public final TableField<GuessRecord, Integer> GUESSED_NUMBER = createField(DSL.name("guessed_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.guess.difference</code>.
     */
    public final TableField<GuessRecord, Integer> DIFFERENCE = createField(DSL.name("difference"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.guess.member_name</code>.
     */
    public final TableField<GuessRecord, String> MEMBER_NAME = createField(DSL.name("member_name"), SQLDataType.CLOB.nullable(false), this, "");

    private Guess(Name alias, Table<GuessRecord> aliased) {
        this(alias, aliased, null);
    }

    private Guess(Name alias, Table<GuessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.guess</code> table reference
     */
    public Guess(String alias) {
        this(DSL.name(alias), GUESS);
    }

    /**
     * Create an aliased <code>public.guess</code> table reference
     */
    public Guess(Name alias) {
        this(alias, GUESS);
    }

    /**
     * Create a <code>public.guess</code> table reference
     */
    public Guess() {
        this(DSL.name("guess"), null);
    }

    public <O extends Record> Guess(Table<O> child, ForeignKey<O, GuessRecord> key) {
        super(child, key, GUESS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<GuessRecord> getPrimaryKey() {
        return Keys.GUESS_PKEY;
    }

    @Override
    public List<UniqueKey<GuessRecord>> getKeys() {
        return Arrays.<UniqueKey<GuessRecord>>asList(Keys.GUESS_PKEY);
    }

    @Override
    public List<ForeignKey<GuessRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GuessRecord, ?>>asList(Keys.GUESS__GUESS_PLAY_ID_FK);
    }

    public Play play() {
        return new Play(this, Keys.GUESS__GUESS_PLAY_ID_FK);
    }

    @Override
    public Guess as(String alias) {
        return new Guess(DSL.name(alias), this);
    }

    @Override
    public Guess as(Name alias) {
        return new Guess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Guess rename(String name) {
        return new Guess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Guess rename(Name name) {
        return new Guess(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, UUID, Integer, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
