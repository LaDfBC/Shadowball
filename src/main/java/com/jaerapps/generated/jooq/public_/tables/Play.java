/*
 * This file is generated by jOOQ.
 */
package com.jaerapps.generated.jooq.public_.tables;


import com.jaerapps.generated.jooq.public_.Keys;
import com.jaerapps.generated.jooq.public_.Public;
import com.jaerapps.generated.jooq.public_.tables.records.PlayRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Play extends TableImpl<PlayRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.play</code>
     */
    public static final Play PLAY = new Play();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayRecord> getRecordType() {
        return PlayRecord.class;
    }

    /**
     * The column <code>public.play.play_id</code>.
     */
    public final TableField<PlayRecord, UUID> PLAY_ID = createField(DSL.name("play_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.play.pitch_value</code>.
     */
    public final TableField<PlayRecord, Integer> PITCH_VALUE = createField(DSL.name("pitch_value"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.play.creation_date</code>.
     */
    public final TableField<PlayRecord, LocalDate> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.play.game_id</code>.
     */
    public final TableField<PlayRecord, UUID> GAME_ID = createField(DSL.name("game_id"), SQLDataType.UUID.nullable(false), this, "");

    private Play(Name alias, Table<PlayRecord> aliased) {
        this(alias, aliased, null);
    }

    private Play(Name alias, Table<PlayRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.play</code> table reference
     */
    public Play(String alias) {
        this(DSL.name(alias), PLAY);
    }

    /**
     * Create an aliased <code>public.play</code> table reference
     */
    public Play(Name alias) {
        this(alias, PLAY);
    }

    /**
     * Create a <code>public.play</code> table reference
     */
    public Play() {
        this(DSL.name("play"), null);
    }

    public <O extends Record> Play(Table<O> child, ForeignKey<O, PlayRecord> key) {
        super(child, key, PLAY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PlayRecord> getPrimaryKey() {
        return Keys.PLAY_PKEY;
    }

    @Override
    public List<UniqueKey<PlayRecord>> getKeys() {
        return Arrays.<UniqueKey<PlayRecord>>asList(Keys.PLAY_PKEY);
    }

    @Override
    public List<ForeignKey<PlayRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PlayRecord, ?>>asList(Keys.PLAY__PLAY_GAME_ID_FK);
    }

    public Game game() {
        return new Game(this, Keys.PLAY__PLAY_GAME_ID_FK);
    }

    @Override
    public Play as(String alias) {
        return new Play(DSL.name(alias), this);
    }

    @Override
    public Play as(Name alias) {
        return new Play(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Play rename(String name) {
        return new Play(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Play rename(Name name) {
        return new Play(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, Integer, LocalDate, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
